# Dev to Main Sync Workflow
#
# Purpose: Automatically sync dev branch to main branch
# Triggers: Scheduled Mon/Thu, manual dispatch
# Dependencies: peter-evans/create-pull-request
#
# This workflow:
# - Attempts automatic merge of dev → main
# - Creates PR if merge conflicts occur
# - Maintains branch synchronization

name: sync-dev-to-main

on:
  schedule:
    - cron: '0 5 * * 1,4'
  workflow_dispatch:

jobs:
  merge-dev-main:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Verify dev branch exists
        run: |
          git fetch origin dev:dev || true
          if ! git show-ref --verify --quiet refs/heads/dev; then
            echo "❌ dev branch missing from remote!"
            git branch -a
            exit 1
          fi
          echo "✅ dev branch ready for merge."

      - name: Backup current main
        run: |
          TIMESTAMP=$(date +'%Y%m%d-%H%M')
          BACKUP_BRANCH="backup-main-${TIMESTAMP}"
          git checkout -b "$BACKUP_BRANCH"
          git push origin "$BACKUP_BRANCH"
          echo "🔒 Backup created: $BACKUP_BRANCH"

      - name: Attempt merge from dev
        id: merge
        continue-on-error: true
        run: |
          echo "🚀 Merging dev into main (dev-preferred)..."
          # Use theirs strategy for automatic preference to dev changes
          git merge origin/dev --strategy-option=theirs --no-edit || true

          # If conflicts remain after --theirs, abort safe-merge mode
          if git ls-files -u | grep -q .; then
            echo "⚠️ Remaining conflicts detected."
            echo "Setting MERGE_CONFLICT=1" >> "$GITHUB_ENV"
          else
            echo "🧩 Merge clean — pushing updated main branch"
            git push origin HEAD:main
          fi

      - name: Log backup and changes
        if: success()
        run: |
          echo "✅ Backup exists for main before this merge."
          echo "   → Branch: $(git branch --show-current)"
          echo "   → Remote: origin/main"

      - name: Summary output
        run: |
          echo "## 🧭 Dev → Main Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Backup created before merge" >> $GITHUB_STEP_SUMMARY
          echo "- 'dev' changes preferred automatically (--theirs)" >> $GITHUB_STEP_SUMMARY
          echo "- If conflicts remain, a PR will be created" >> $GITHUB_STEP_SUMMARY

      - name: Create PR if conflict (fallback)
        if: env.MERGE_CONFLICT == '1'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: main
          branch: dev
          title: "chore: sync dev → main (conflicts detected)"
          body: |
            🔀 Automatic merge failed due to conflicts

            **Action Required:** Please review manually.**

            A backup branch has been created for main:
            ```
            git fetch origin
            git checkout backup-main-<timestamp>
            ```

            Manual merge instructions (dev wins by default):

            ```bash
            git checkout main
            git merge origin/dev --strategy-option=theirs
            git push origin main
            ```