# Build Shimboot Workflow
#
# Purpose: Build ChromeOS shimboot images for specified boards with configurable rootfs variants
# Dependencies: GitHub Actions runners, Nix, Cachix (optional)
# Related: assemble-final.sh, flake.nix
#
# This workflow:
# - Builds NixOS shimboot images for ChromeOS devices
# - Supports multiple board variants and rootfs configurations
# - Optimizes GitHub Actions runner space for large builds
# - Caches build artifacts using Magic Nix Cache and optional Cachix
# - Assembles final bootable images with vendor drivers

name: build-shimboot

# Workflow Triggers
# Manual dispatch with user inputs for board selection, rootfs variant, and caching options

on:
  workflow_dispatch:
    inputs:
      board:
        description: 'Board to build'
        required: true
        default: 'dedede'
        type: choice
        options: [all, dedede, octopus, zork, nissa, hatch, grunt, snappy]
      rootfs:
        description: 'Rootfs variant'
        required: true
        default: 'minimal'
        type: choice
        options: [minimal, full]
      push_to_cachix:
        description: 'Push to Cachix'
        required: false
        default: false
        type: boolean
      runner_type:
        description: 'Runner type (self-hosted or GitHub-hosted)'
        required: true
        default: 'ubuntu-latest'
        type: choice
        options: [ubuntu-latest, popcat19-nixos0]

# Environment Variables
# Allow unfree packages in Nix builds for proprietary components

env:
  NIXPKGS_ALLOW_UNFREE: 1

# Job Definitions
# Single build job with matrix strategy for different boards

jobs:
  build:
    runs-on: ${{ github.event.inputs.runner_type || 'ubuntu-latest' }}
    permissions:
      contents: write

    # Build Strategy
    # Matrix build for selected board, fail-fast disabled to build all variants
    strategy:
      fail-fast: false
      matrix:
        board: >-
          ${{
            github.event.inputs.board == 'all'
            && fromJSON('["dedede", "octopus", "zork", "nissa", "hatch", "grunt", "snappy"]')
            || fromJSON(format('["{0}"]', github.event.inputs.board))
          }}

    # Build Steps
    # Sequential steps to prepare environment, build components, and assemble final image
    steps:
      # Environment Preparation
      # Clean up GitHub Actions runner to maximize available disk space for Nix builds

      # ‚ú® NEW: Maximize space BEFORE anything else
      - name: Maximize build space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      # Repository Setup
      # Checkout full repository history for complete build context

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ‚ú® NEW: Nothing but Nix for massive space reclamation
      - name: Reclaim disk space for Nix
        uses: wimpysworld/nothing-but-nix@main
        with:
          hatchet-protocol: 'cleave'  # 115GB mode

      # Nix Installation and Configuration
      # Install Nix with flake support and configure binary caches

      # Install Nix with Determinate Systems installer (faster)
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            auto-optimise-store = true
            substituters = https://cache.nixos.org https://shimboot-systemd-nixos.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= shimboot-systemd-nixos.cachix.org-1:vCWmEtJq7hA2UOLN0s3njnGs9/EuX06kD7qOJMo2kAA=

      # ‚ú® NEW: Magic Nix Cache (auto-caching to GHA cache)
      - name: Setup Magic Nix Cache
        uses: DeterminateSystems/magic-nix-cache-action@v2

      # Optional: Setup Cachix for external binary cache
      - name: Setup Cachix
        if: ${{ github.event.inputs.push_to_cachix == 'true' || github.event_name == 'release' }}
        uses: cachix/cachix-action@v14
        with:
          name: shimboot-systemd-nixos
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      # Nix Component Building
      # Build all required Nix derivations for the selected board and rootfs variant

      # Build Nix components
      - name: Build Nix components
        run: |
          BOARD="${{ matrix.board }}"
          ROOTFS="${{ github.event.inputs.rootfs || 'minimal' }}"

          echo "üî® Building for: $BOARD (rootfs: $ROOTFS)"

          # Build all derivations
          nix build --impure --accept-flake-config \
            .#chromeos-shim-${BOARD} \
            .#extracted-kernel-${BOARD} \
            .#initramfs-patching-${BOARD} \
            --print-out-paths

          if [ "$ROOTFS" = "minimal" ]; then
            nix build --impure --accept-flake-config .#raw-rootfs-minimal --print-out-paths
          else
            nix build --impure --accept-flake-config .#raw-rootfs --print-out-paths
          fi

          df -h

      # Assembly Preparation
      # Install system tools required for image assembly and compression

      # Install assembly dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            parted gdisk e2fsprogs util-linux pv zstd vboot-utils

      # Assemble final image
      - name: Assemble image
        run: |
          # Ensure Nix environment is available for root
          if [ -e /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
            source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          fi

          echo "üíæ Available space before assembly:"
          df -h

          sudo -E env "PATH=$PATH" "NIX_PATH=$NIX_PATH" \
            BOARD="${{ matrix.board }}" \
            ./assemble-final.sh \
              --board "${{ matrix.board }}" \
              --rootfs "${{ github.event.inputs.rootfs || 'minimal' }}" \
              --drivers vendor

          echo "üíæ Available space after assembly:"
          df -h

      # Artifact Preparation
      # Compress final image and generate checksum for distribution

      - name: Compress and rename
        run: |
          set -e
          if [ -f "/nix/work/shimboot.img" ]; then
            WORKDIR="/nix/work"
          elif [ -f "work/shimboot.img" ]; then
            WORKDIR="work"
          else
            echo "‚ùå Error: shimboot.img not found!"
            echo "üîç Searching entire filesystem..."
            sudo find / -name "shimboot.img" -type f 2>/dev/null | head -10
            exit 1
          fi

          if ! sudo parted -s "$WORKDIR/shimboot.img" print >/dev/null 2>&1; then
            echo "‚ùå Error: shimboot.img is not a valid disk image!"
            exit 1
          fi

          # Fix permissions if in /nix/work (created by sudo)
          if [ "$WORKDIR" = "/nix/work" ]; then
            echo "üîß Adjusting permissions for compression..."
            sudo chown -R $(whoami):$(whoami) "$WORKDIR"
          fi

          cd "$WORKDIR"
          # Build artifact directory structure
          ARTIFACT_TAG="${{ matrix.board }}-shimboot-${{ github.event.inputs.rootfs || 'minimal' }}"
          ARTIFACT_DIR="${ARTIFACT_TAG}"
          mkdir -p "$ARTIFACT_DIR"

          echo "üì¶ Compressing image for ${ARTIFACT_TAG}..."
          pv shimboot.img | zstd -19 --long -T0 -o "$ARTIFACT_DIR/${ARTIFACT_TAG}.img.zst"

          echo "üîê Generating SHA256 checksum..."
          (
            cd "$ARTIFACT_DIR"
            sha256sum "${ARTIFACT_TAG}.img.zst" > "${ARTIFACT_TAG}.img.zst.sha256"
            du -h "${ARTIFACT_TAG}.img.zst" >> "${ARTIFACT_TAG}.img.zst.sha256"
          )

          SIZE_MB=$(du -m "$ARTIFACT_DIR/${ARTIFACT_TAG}.img.zst" | cut -f1)
          ORIG_SIZE_MB=$(du -m "shimboot.img" | cut -f1)
          COMPRESSION_RATIO=$((100 - (SIZE_MB * 100 / ORIG_SIZE_MB)))

          echo "üìä Compression stats:"
          echo "  Original: ${ORIG_SIZE_MB}MB"
          echo "  Compressed: ${SIZE_MB}MB (${COMPRESSION_RATIO}% reduction)"

          if [ "$SIZE_MB" -gt 2000 ]; then
            echo "‚ö†Ô∏è Exceeds 2GB limit (${SIZE_MB}MB)"
            echo "üí° Consider uploading via release assets"
            exit 1
          else
            echo "‚úÖ Size OK (${SIZE_MB}MB)"
          fi

          echo "‚úÖ Created artifact directory:"
          tree -h "$ARTIFACT_DIR" || ls -lh "$ARTIFACT_DIR"

          # Remove uncompressed image
          rm -f shimboot.img

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.board }}-shimboot-${{ github.event.inputs.rootfs || 'minimal' }}
          path: |
            /nix/work/${{ matrix.board }}-shimboot-${{ github.event.inputs.rootfs || 'minimal' }}/
            work/${{ matrix.board }}-shimboot-${{ github.event.inputs.rootfs || 'minimal' }}/
          retention-days: 30