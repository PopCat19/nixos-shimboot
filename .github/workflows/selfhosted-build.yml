# Self-Hosted Full Build Workflow
#
# Purpose: Build shimboot images on self-hosted GitHub runners
# Triggers: Manual dispatch
# Dependencies: Self-hosted runner with Nix, 50GB+ disk space
#
# This workflow:
# - Leverages persistent Nix store on self-hosted infrastructure
# - Builds all boards in parallel (resource permitting)
# - Supports both minimal and full rootfs variants
# - Handles cleanup automatically between runs
# - Pushes to Cachix for distributed caching

name: selfhosted-build

on:
  workflow_dispatch:
    inputs:
      board:
        description: 'Board to build (or "all")'
        required: true
        default: 'dedede'
        type: choice
        options: [all, dedede, octopus, zork, nissa, hatch, grunt, snappy]
      rootfs:
        description: 'Rootfs variant'
        required: true
        default: 'minimal'
        type: choice
        options: [minimal, full, both]
      push_to_cachix:
        description: 'Push to Cachix'
        required: false
        default: true
        type: boolean
      skip_assembly:
        description: 'Skip final image assembly (Nix build only)'
        required: false
        default: false
        type: boolean

env:
  NIXPKGS_ALLOW_UNFREE: 1

jobs:
  # Pre-flight checks and cache warming
  preflight:
    runs-on: popcat19-nixos0
    outputs:
      boards: ${{ steps.matrix.outputs.boards }}
      rootfs_variants: ${{ steps.matrix.outputs.rootfs }}
    
    steps:
      - name: System info
        run: |
          echo "## 🖥️ Self-Hosted Runner Info" >> $GITHUB_STEP_SUMMARY
          echo "- Hostname: $(hostname)" >> $GITHUB_STEP_SUMMARY
          echo "- CPU Cores: $(nproc)" >> $GITHUB_STEP_SUMMARY
          echo "- RAM: $(free -h | awk '/^Mem:/ {print $2}')" >> $GITHUB_STEP_SUMMARY
          echo "- Disk Space: $(df -h /nix | awk 'NR==2 {print $4}') available" >> $GITHUB_STEP_SUMMARY
          echo "- Nix Version: $(nix --version)" >> $GITHUB_STEP_SUMMARY

      - name: Disk space check
        run: |
          AVAILABLE_GB=$(df -BG /nix | awk 'NR==2 {print $4}' | sed 's/G//')
          if [ "$AVAILABLE_GB" -lt 50 ]; then
            echo "⚠️ WARNING: Only ${AVAILABLE_GB}GB available on /nix"
            echo "Consider cleaning up with: nix-collect-garbage -d"
          else
            echo "✅ Sufficient disk space: ${AVAILABLE_GB}GB"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 🧹 Optional Ubuntu-only disk reclaim (skip on selfhost)
      - name: Reclaim disk space for Nix (Ubuntu only)
        if: startsWith(runner.name, 'GitHub') || runner.os == 'Linux' && runner.arch == 'X64'
        uses: wimpysworld/nothing-but-nix@main
        with:
          hatchet-protocol: 'cleave'

      - name: Maximize build space (Ubuntu only)
        if: startsWith(runner.name, 'GitHub') || runner.os == 'Linux' && runner.arch == 'X64'
        run: |
          echo "Running disk cleanup for Ubuntu runner..."
          SUDO=""
          if command -v sudo >/dev/null 2>&1; then
            SUDO=sudo
          fi
          echo "🔧 Using privilege command: ${SUDO:-none}"
          df -h
          $SUDO rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          $SUDO docker image prune --all --force || true
          df -h

      - name: Generate build matrix
        id: matrix
        run: |
          # Determine boards to build
          if [ "${{ github.event.inputs.board }}" = "all" ]; then
            BOARDS='["dedede", "octopus", "zork", "nissa", "hatch", "grunt", "snappy"]'
          else
            BOARDS='["${{ github.event.inputs.board }}"]'
          fi
          echo "boards=$BOARDS" >> $GITHUB_OUTPUT

          # Determine rootfs variants
          case "${{ github.event.inputs.rootfs }}" in
            both)
              ROOTFS='["minimal", "full"]'
              ;;
            *)
              ROOTFS='["${{ github.event.inputs.rootfs }}"]'
              ;;
          esac
          echo "rootfs=$ROOTFS" >> $GITHUB_OUTPUT

      - name: Clean old build artifacts
        run: |
          SUDO=""
          if command -v sudo >/dev/null 2>&1; then
            SUDO=sudo
          fi
          echo "🔧 Using privilege command: ${SUDO:-none}"

          # Remove old work directories (older than 7 days)
          $SUDO find . -maxdepth 1 -name "work*" -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true

          # Clean up old result symlinks
          $SUDO find . -maxdepth 1 -name "result*" -type l -delete 2>/dev/null || true

  # Main build job with matrix strategy
  build:
    needs: preflight
    runs-on: popcat19-nixos0
    
    strategy:
      fail-fast: false
      max-parallel: 3  # Adjust based on your runner's resources
      matrix:
        board: ${{ fromJSON(needs.preflight.outputs.boards) }}
        rootfs: ${{ fromJSON(needs.preflight.outputs.rootfs_variants) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Cachix
        if: ${{ github.event.inputs.push_to_cachix == 'true' }}
        run: |
          if command -v cachix >/dev/null 2>&1; then
            if [ -n "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
              echo "${{ secrets.CACHIX_AUTH_TOKEN }}" | cachix authtoken --stdin
              echo "✅ Cachix authenticated"
            else
              echo "⚠️ CACHIX_AUTH_TOKEN not set, using read-only mode"
            fi
          else
            echo "🧩 Skipping Cachix install (system likely has Nix preinstalled)"
            if [ -f /run/current-system/sw/bin/cachix ]; then
              echo "✅ Found Cachix preinstalled in NixOS system path"
              export PATH="/run/current-system/sw/bin:$PATH"
            else
              echo "⚠️ Cachix not installed; continuing without it."
            fi
          fi

      - name: Build Nix components
        id: nix_build
        run: |
          set -e
          BOARD="${{ matrix.board }}"
          ROOTFS="${{ matrix.rootfs }}"
          
          echo "🔨 Building $BOARD ($ROOTFS rootfs)..."
          echo "## 🔨 Building: $BOARD ($ROOTFS)" >> $GITHUB_STEP_SUMMARY

          # Build with --keep-going to maximize cache hits
          BUILD_ARGS="--impure --accept-flake-config --keep-going"
          
          # Build components
          echo "Building shim..."
          nix build $BUILD_ARGS .#chromeos-shim-${BOARD} --print-out-paths | tee -a build.log
          
          echo "Building kernel..."
          nix build $BUILD_ARGS .#extracted-kernel-${BOARD} --print-out-paths | tee -a build.log
          
          echo "Building initramfs..."
          nix build $BUILD_ARGS .#initramfs-patching-${BOARD} --print-out-paths | tee -a build.log
          
          echo "Building rootfs..."
          if [ "$ROOTFS" = "minimal" ]; then
            nix build $BUILD_ARGS .#raw-rootfs-minimal --print-out-paths | tee -a build.log
          else
            nix build $BUILD_ARGS .#raw-rootfs --print-out-paths | tee -a build.log
          fi

          # Record build statistics
          echo "- Build completed: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Store paths:" >> $GITHUB_STEP_SUMMARY
          cat build.log | sed 's/^/  - /' >> $GITHUB_STEP_SUMMARY

      - name: Push to Cachix
        if: success() && github.event.inputs.push_to_cachix == 'true'
        run: |
          echo "📤 Pushing to Cachix..."
          cat build.log | while read path; do
            [ -n "$path" ] && cachix push shimboot-systemd-nixos "$path" || true
          done

      - name: Assemble final image
        if: github.event.inputs.skip_assembly != 'true'
        run: |
          echo "🔧 Assembling final image..."

          SUDO=""
          if command -v sudo >/dev/null 2>&1; then
            SUDO="sudo -E"
          fi
          echo "🔧 Using privilege command: ${SUDO:-none}"

          # Isolate workdir for this build
          export WORKDIR="${PWD}/work-${{ matrix.board }}-${{ matrix.rootfs }}"
          mkdir -p "$WORKDIR"

          if [ -n "$SUDO" ]; then
            $SUDO env "PATH=$PATH" \
              BOARD="${{ matrix.board }}" \
              WORKDIR="$WORKDIR" \
              ./assemble-final.sh \
                --board "${{ matrix.board }}" \
                --rootfs "${{ matrix.rootfs }}" \
                --drivers vendor
          else
            echo "⚙️  Running assemble-final.sh as $(whoami)..."
            env "PATH=$PATH" \
              BOARD="${{ matrix.board }}" \
              WORKDIR="$WORKDIR" \
              ./assemble-final.sh \
                --board "${{ matrix.board }}" \
                --rootfs "${{ matrix.rootfs }}" \
                --drivers vendor
          fi

      # 💾 Skip unnecessary package installs on selfhost
      - name: Install Ubuntu build dependencies (Ubuntu only)
        if: startsWith(runner.name, 'GitHub')
        run: |
          SUDO=""
          if command -v sudo >/dev/null 2>&1; then
            SUDO=sudo
          fi
          echo "🔧 Using privilege command: ${SUDO:-none}"
          $SUDO apt-get update
          $SUDO apt-get install -y zstd zip pv parted e2fsprogs gdisk

      - name: Compress and prepare artifact
        if: success() && github.event.inputs.skip_assembly != 'true'
        run: |
          WORKDIR="${PWD}/work-${{ matrix.board }}-${{ matrix.rootfs }}"
          
          if [ ! -f "$WORKDIR/shimboot.img" ]; then
            echo "❌ Image not found!"
            exit 1
          fi

          cd "$WORKDIR"
          ARTIFACT_NAME="${{ matrix.board }}-shimboot-${{ matrix.rootfs }}"
          
          echo "📦 Compressing $ARTIFACT_NAME..."
          pv shimboot.img | zstd -19 --long -T0 -o "${ARTIFACT_NAME}.img.zst"
          
          echo "🔐 Generating checksums..."
          sha256sum "${ARTIFACT_NAME}.img.zst" > "${ARTIFACT_NAME}.img.zst.sha256"
          b2sum "${ARTIFACT_NAME}.img.zst" > "${ARTIFACT_NAME}.img.zst.b2"
          
          # Package into zip
          zip -9 "${ARTIFACT_NAME}.zip" \
            "${ARTIFACT_NAME}.img.zst" \
            "${ARTIFACT_NAME}.img.zst.sha256" \
            "${ARTIFACT_NAME}.img.zst.b2"
          
          # Stats
          SIZE_MB=$(du -m "${ARTIFACT_NAME}.img.zst" | cut -f1)
          echo "## 📊 Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact: ${ARTIFACT_NAME}.zip" >> $GITHUB_STEP_SUMMARY
          echo "- Compressed size: ${SIZE_MB}MB" >> $GITHUB_STEP_SUMMARY

      - name: Upload artifact
        if: success() && github.event.inputs.skip_assembly != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.board }}-shimboot-${{ matrix.rootfs }}
          path: work-${{ matrix.board }}-${{ matrix.rootfs }}/*.zip
          retention-days: 30
          compression-level: 0  # Already compressed

      - name: Cleanup build directory
        if: always()
        run: |
          SUDO=""
          if command -v sudo >/dev/null 2>&1; then
            SUDO=sudo
          fi
          echo "🔧 Using privilege command: ${SUDO:-none}"

          # Clean up this specific build's work directory
          WORKDIR="${PWD}/work-${{ matrix.board }}-${{ matrix.rootfs }}"
          if [ -d "$WORKDIR" ]; then
            echo "🧹 Cleaning up $WORKDIR..."
            $SUDO rm -rf "$WORKDIR" || true
          fi

  # Optional: Garbage collection job
  cleanup:
    needs: build
    runs-on: popcat19-nixos0
    if: always()
    
    steps:
      - name: Nix garbage collection
        if: always()
        continue-on-error: true
        run: |
          SUDO=""
          if command -v sudo >/dev/null 2>&1; then
            SUDO=sudo
          fi
          echo "🔧 Using privilege command: ${SUDO:-none}"

          echo "🗑️ Running Nix garbage collection..."
          $SUDO nix-collect-garbage --delete-older-than 7d || true
          $SUDO nix-store --optimise || true

      - name: Report storage stats
        run: |
          echo "## 💾 Storage Statistics" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          df -h /nix >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY