{ config, lib, pkgs, ... }:

with lib;

let
  # Configuration options for initramfs patching
  cfg = config.initramfs-patching;
  
  # Path to the ChromeOS shim binary
  shimBin = cfg.shimBin;
  
  # Path to the bootloader files
  bootloaderFiles = cfg.bootloaderFiles;
  
  # Kernel extraction derivation
  kernelExtraction = pkgs.callPackage ./kernel-extraction.nix {
    inherit shimBin;
  };
  
  # Initramfs extraction derivation
  initramfsExtraction = pkgs.callPackage ./initramfs-extraction.nix {
    extractedKernel = kernelExtraction;
  };
  
  # Initramfs patching derivation
  initramfsPatching = pkgs.callPackage ./initramfs-patching.nix {
    inherit bootloaderFiles;
    extractedInitramfs = initramfsExtraction;
  };
  
  # Kernel module harvesting derivation
  kernelHarvesting = pkgs.callPackage ./kernel-harvesting.nix {
    inherit shimBin;
    recoveryBin = cfg.recoveryBin;
  };
  
  # Kernel repackaging derivation
  kernelRepackaging = pkgs.callPackage ./kernel-repackaging.nix {
    extractedKernel = kernelExtraction;
    patchedInitramfs = initramfsPatching;
  };
  
in {
  # Module options
  options.initramfs-patching = {
    enable = mkEnableOption "Enable initramfs patching for ChromeOS shim";
    
    shimBin = mkOption {
      type = types.path;
      description = "Path to the ChromeOS shim binary file";
      example = "./data/shim.bin";
    };
    
    bootloaderFiles = mkOption {
      type = types.path;
      description = "Path to the directory containing shimboot bootloader files";
      example = "./bootloader";
    };
    
    recoveryBin = mkOption {
      type = types.nullOr types.path;
      default = null;
      description = "Path to the ChromeOS recovery binary file (optional, for kernel module harvesting)";
      example = "./data/recovery.bin";
    };
    
    outputDir = mkOption {
      type = types.path;
      default = "./patched-initramfs";
      description = "Output directory for the patched initramfs";
    };
  };
  
  # Module implementation
  config = mkIf cfg.enable {
    # Create packages that provide the complete initramfs patching workflow
    packages.initramfs-patching = initramfsPatching;
    packages.kernel-harvesting = kernelHarvesting;
    packages.kernel-repackaging = kernelRepackaging;
    packages.extracted-kernel = kernelExtraction;
    packages.extracted-initramfs = initramfsExtraction;
    
    # Create a script that runs the complete workflow
    system.activationScripts.initramfs-patching = ''
      # Create output directory if it doesn't exist
      mkdir -p ${cfg.outputDir}
      
      # Copy the patched initramfs to the output directory
      if [ -d "${initramfsPatching}" ]; then
        echo "Copying patched initramfs to ${cfg.outputDir}..."
        cp -r ${initramfsPatching}/* ${cfg.outputDir}/
        echo "Patched initramfs available at: ${cfg.outputDir}"
        
        # Create a summary file
        cat > ${cfg.outputDir}/README.txt << EOF
Initramfs Patching Complete
==========================

This directory contains the patched initramfs with shimboot bootloader integration.

Generated by: NixOS initramfs-patching module
Source Shim: ${cfg.shimBin}
Bootloader Files: ${cfg.bootloaderFiles}
Generated Date: $(date)

Contents:
- init/ - Patched init script that executes bootstrap.sh
- bin/ - Bootloader binaries and scripts
- sbin/ - Additional bootloader binaries
- opt/ - Bootloader utilities and version info
- lib/ - System libraries
- lib64/ - 64-bit system libraries
- var/ - Runtime data and system state

The initramfs is ready for integration into a NixOS build system.
EOF
      else
        echo "ERROR: Patched initramfs not found at ${initramfsPatching}"
        exit 1
      fi
    '';
    
    # Create a convenience script for manual execution
    environment.systemPackages = [
      (pkgs.writeShellScriptBin "patch-initramfs" ''
        set -euo pipefail
        
        echo "Starting initramfs patching workflow..."
        
        # Check if the module is enabled
        if [ ! -d "${initramfsPatching}" ]; then
          echo "ERROR: initramfs-patching module is not enabled or build failed"
          echo "Please enable the module in your configuration:"
          echo "  initramfs-patching.enable = true;"
          echo "  initramfs-patching.shimBin = \"${cfg.shimBin}\";"
          echo "  initramfs-patching.bootloaderFiles = \"${cfg.bootloaderFiles}\";"
          exit 1
        fi
        
        # Create output directory
        mkdir -p ${cfg.outputDir}
        
        # Copy the patched initramfs
        echo "Copying patched initramfs to ${cfg.outputDir}..."
        cp -r ${initramfsPatching}/* ${cfg.outputDir}/
        
        echo "✓ Initramfs patching completed successfully!"
        echo "✓ Patched initramfs available at: ${cfg.outputDir}"
        echo "✓ Summary available at: ${cfg.outputDir}/README.txt"
      '')
    ];
    
    # Create a development shell for initramfs patching
    devShells.initramfs-patching = pkgs.mkShell {
      name = "initramfs-patching";
      
      buildInputs = with pkgs; [
        # Tools for manual inspection and testing
        binwalk
        xz
        cpio
        cgpt
        jq
        coreutils
        gnugrep
        gawk
        
        # The patched initramfs for testing
        initramfsPatching
      ];
      
      shellHook = ''
        echo "Welcome to the initramfs patching development environment!"
        echo ""
        echo "Available commands:"
        echo "  patch-initramfs          - Run the complete patching workflow"
        echo "  ls ${initramfsPatching}  - Inspect the patched initramfs"
        echo ""
        echo "Configuration:"
        echo "  Shim binary: ${cfg.shimBin}"
        echo "  Bootloader files: ${cfg.bootloaderFiles}"
        echo "  Output directory: ${cfg.outputDir}"
        echo ""
        echo "The patched initramfs is available at: ${initramfsPatching}"
      '';
    };
  };
}