{ self, nixpkgs, ... }:

let
  system = "x86_64-linux";
  pkgs = nixpkgs.legacyPackages.${system};
  
  # Create a simple initramfs patching package for testing
  initramfsPatching = pkgs.stdenv.mkDerivation {
    name = "initramfs-patching";
    version = "1.0.0";
    
    # Native build dependencies
    nativeBuildInputs = with pkgs; [
      coreutils
    ];
    
    # Don't need to unpack since we're just creating test files
    dontUnpack = true;
    
    # Build phase - create test files
    buildPhase = ''
      runHook preBuild
      
      echo "Creating initramfs patching package..."
      
      # Create output directory
      mkdir -p $out
      
      # Create a simple initramfs structure
      mkdir -p $out/bin
      mkdir -p $out/opt
      
      # Copy bootloader files
      cp -r ${../bootloader}/* $out/
      
      # Create metadata
      cat > $out/metadata.txt << EOF
      Initramfs Patching Package
      =========================
      Generated by: Nix derivation
      Date: $(date)
      Bootloader files: ${../bootloader}
      
      This package provides the initramfs patching functionality.
      
      Note: This is a simplified version for testing. The full initramfs patching
      functionality requires the impure derivations from the initramfs-patching-poc
      directory, which handle the actual ChromeOS shim binary processing.
      EOF
      
      runHook postBuild
    '';
    
    # Meta information
    meta = with pkgs.lib; {
      description = "Initramfs patching package for ChromeOS shim";
      longDescription = ''
        This package provides initramfs patching functionality for ChromeOS shim binaries.
        It includes the bootloader files and metadata needed for patching.
        
        Note: This is a simplified version for testing. The full initramfs patching
        functionality requires the impure derivations from the initramfs-patching-poc
        directory, which handle the actual ChromeOS shim binary processing.
      '';
      license = licenses.bsd3;
      platforms = platforms.linux;
      maintainers = [ "shimboot developers" ];
    };
  };
  
in {
  # Package providing the initramfs patching
  packages.${system}.initramfs-patching = initramfsPatching;
  
  # Example NixOS module that uses initramfs patching
  nixosModules.initramfs-patching = { config, lib, pkgs, ... }:
    with lib;
    let
      cfg = config.initramfs-patching;
      
      # Path to the ChromeOS shim binary
      shimBin = cfg.shimBin;
      
      # Path to the bootloader files
      bootloaderFiles = cfg.bootloaderFiles;
      
      # Kernel extraction derivation
      kernelExtraction = pkgs.callPackage ./derivations/kernel-extraction.nix {
        inherit shimBin;
      };
      
      # Initramfs extraction derivation
      initramfsExtraction = pkgs.callPackage ./derivations/initramfs-extraction.nix {
        extractedKernel = kernelExtraction;
      };
      
      # Initramfs patching derivation
      initramfsPatching = pkgs.callPackage ./derivations/initramfs-patching.nix {
        inherit bootloaderFiles;
        extractedInitramfs = initramfsExtraction;
      };
      
    in {
      # Module options
      options.initramfs-patching = {
        enable = mkEnableOption "Enable initramfs patching for ChromeOS shim";
        
        shimBin = mkOption {
          type = types.path;
          description = "Path to the ChromeOS shim binary file";
          default = ../data/shim.bin;
          example = "./data/shim.bin";
        };
        
        bootloaderFiles = mkOption {
          type = types.path;
          description = "Path to the directory containing shimboot bootloader files";
          default = ../bootloader;
          example = "./bootloader";
        };
        
        outputDir = mkOption {
          type = types.path;
          default = "./patched-initramfs";
          description = "Output directory for the patched initramfs";
        };
        
        autoPatch = mkOption {
          type = types.bool;
          default = false;
          description = "Whether to automatically patch initramfs during system activation";
        };
      };
      
      # Module implementation
      config = mkIf cfg.enable {
        # Create a package that provides the complete initramfs patching workflow
        packages.initramfs-patching = initramfsPatching;
        
        # Create a script that runs the complete workflow
        system.activationScripts.initramfs-patching = mkIf cfg.autoPatch ''
          # Create output directory if it doesn't exist
          mkdir -p ${cfg.outputDir}
          
          # Copy the patched initramfs to the output directory
          if [ -d "${initramfsPatching}" ]; then
            echo "Copying patched initramfs to ${cfg.outputDir}..."
            cp -r ${initramfsPatching}/* ${cfg.outputDir}/
            echo "Patched initramfs available at: ${cfg.outputDir}"
            
            # Create a summary file
            cat > ${cfg.outputDir}/README.txt << EOF
Initramfs Patching Complete
==========================

This directory contains the patched initramfs with shimboot bootloader integration.

Generated by: NixOS initramfs-patching module
Source Shim: ${cfg.shimBin}
Bootloader Files: ${cfg.bootloaderFiles}
Generated Date: $(date)

Contents:
- init/ - Patched init script that executes bootstrap.sh
- bin/ - Bootloader binaries and scripts
- sbin/ - Additional bootloader binaries
- opt/ - Bootloader utilities and version info
- lib/ - System libraries
- lib64/ - 64-bit system libraries
- var/ - Runtime data and system state

The initramfs is ready for integration into a NixOS build system.
EOF
          else
            echo "ERROR: Patched initramfs not found at ${initramfsPatching}"
            exit 1
          fi
        '';
        
        # Create a convenience script for manual execution
        environment.systemPackages = [
          (pkgs.writeShellScriptBin "patch-chromeos-initramfs" ''
            set -euo pipefail
            
            echo "Starting initramfs patching workflow..."
            
            # Check if the module is enabled
            if [ ! -d "${initramfsPatching}" ]; then
              echo "ERROR: initramfs-patching module is not enabled or build failed"
              echo "Please enable the module in your configuration:"
              echo "  initramfs-patching.enable = true;"
              echo "  initramfs-patching.shimBin = \"${cfg.shimBin}\";"
              echo "  initramfs-patching.bootloaderFiles = \"${cfg.bootloaderFiles}\";"
              exit 1
            fi
            
            # Create output directory
            mkdir -p ${cfg.outputDir}
            
            # Copy the patched initramfs
            echo "Copying patched initramfs to ${cfg.outputDir}..."
            cp -r ${initramfsPatching}/* ${cfg.outputDir}/
            
            echo "✓ Initramfs patching completed successfully!"
            echo "✓ Patched initramfs available at: ${cfg.outputDir}"
            echo "✓ Summary available at: ${cfg.outputDir}/README.txt"
          '')
        ];
        
        # Create a development shell for initramfs patching
        devShells.initramfs-patching = pkgs.mkShell {
          name = "initramfs-patching";
          
          buildInputs = with pkgs; [
            # Tools for manual inspection and testing
            binwalk
            xz
            cpio
            cgpt
            jq
            coreutils
            gnugrep
            gawk
            
            # The patched initramfs for testing
            initramfsPatching
          ];
          
          shellHook = ''
            echo "Welcome to the initramfs patching development environment!"
            echo ""
            echo "Available commands:"
            echo "  patch-chromeos-initramfs  - Run the complete patching workflow"
            echo "  ls ${initramfsPatching}  - Inspect the patched initramfs"
            echo ""
            echo "Configuration:"
            echo "  Shim binary: ${cfg.shimBin}"
            echo "  Bootloader files: ${cfg.bootloaderFiles}"
            echo "  Output directory: ${cfg.outputDir}"
            echo ""
            echo "The patched initramfs is available at: ${initramfsPatching}"
          '';
        };
        
        # Add information to system documentation
        documentation.info.initramfs-patching = {
          name = "Initramfs Patching";
          description = "ChromeOS initramfs patching with shimboot bootloader";
          maintainer = "shimboot developers";
          documentation = ''
            This module provides declarative initramfs patching for ChromeOS shim binaries.
            
            Usage:
            1. Enable the module in your configuration:
               initramfs-patching.enable = true;
            
            2. Configure paths if needed:
               initramfs-patching.shimBin = "/path/to/shim.bin";
               initramfs-patching.bootloaderFiles = "/path/to/bootloader";
            
            3. Build the system:
               nixos-rebuild switch
            
            4. The patched initramfs will be available at: ${cfg.outputDir}
            
            For manual patching, run: patch-chromeos-initramfs
          '';
        };
      };
    };
}