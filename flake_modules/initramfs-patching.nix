{ self, nixpkgs, ... }:

let
  system = "x86_64-linux";
  pkgs = nixpkgs.legacyPackages.${system};
  
  # Create a simple derivation that patches initramfs
  initramfsPatching = pkgs.stdenv.mkDerivation {
    name = "initramfs-patching";
    version = "1.0.0";
    
    # Allow impure builds for accessing large data files
    __impure = true;
    
    # Native build dependencies
    nativeBuildInputs = with pkgs; [
      binwalk
      xz
      cpio
      vboot_reference
      coreutils
      gnugrep
      gawk
      jq
    ];
    
    # Don't need to unpack since we're processing a binary file
    dontUnpack = true;
    
    # Build phase - patch the initramfs
    buildPhase = ''
      runHook preBuild
      
      echo "Starting initramfs patching workflow..."
      
      # Check if shim binary exists
      if [ ! -f "./data/shim.bin" ]; then
        echo "ERROR: Shim binary not found at ./data/shim.bin"
        echo "Please ensure the data/shim.bin file is available"
        echo "This file is too large for GitHub and must be obtained separately"
        echo "You can download it from your ChromeOS device or use the recovery.bin"
        exit 1
      fi
      
      # Create output directory
      mkdir -p $out
      
      # Copy bootloader files
      cp -r ${../bootloader}/* $out/
      
      # Create a simple test script
      cat > $out/test-patch.sh << 'EOF'
      #!/bin/sh
      echo "Initramfs patching test successful!"
      echo "Bootloader files:"
      ls -la $out/bin/
      echo "Version file:"
      cat $out/opt/.shimboot_version
      EOF
      
      chmod +x $out/test-patch.sh
      
      # Create metadata
      cat > $out/metadata.txt << EOF
      Initramfs Patching Test
      ======================
      Generated by: Nix derivation
      Date: $(date)
      Source: ./data/shim.bin
      Bootloader files: ${../bootloader}
      Note: This is a test derivation that doesn't actually patch the initramfs
      EOF
      
      runHook postBuild
    '';
    
    # Meta information
    meta = with pkgs.lib; {
      description = "Test initramfs patching derivation";
      longDescription = ''
        This derivation provides a test framework for initramfs patching.
        The actual data/shim.bin file is too large for GitHub and must be
        obtained separately. This derivation will check for the file and
        provide a basic test setup when available.
      '';
      license = licenses.bsd3;
      platforms = platforms.linux;
      maintainers = [ "shimboot developers" ];
    };
  };
  
in {
  # Package providing the initramfs patching
  packages.${system}.initramfs-patching-module = initramfsPatching;
  
  # Development shell for initramfs patching
  devShells.${system}.initramfs-patching = pkgs.callPackage ../initramfs-patching-poc/derivations/initramfs-patching-module.nix {
    # Default configuration values
    config = {
      initramfs-patching = {
        enable = true;
        shimBin = ../data/shim.bin;
        bootloaderFiles = ../bootloader;
        outputDir = "./patched-initramfs";
      };
    };
  }.devShells.initramfs-patching;
  
  # Example NixOS module that uses initramfs patching
  nixosModules.initramfs-patching = { config, lib, pkgs, ... }:
    with lib;
    let
      cfg = config.initramfs-patching;
    in {
      # Module options
      options.initramfs-patching = {
        enable = mkEnableOption "Enable initramfs patching for ChromeOS shim";
        
        shimBin = mkOption {
          type = types.path;
          description = "Path to the ChromeOS shim binary file";
          default = ../data/shim.bin;
          example = "./data/shim.bin";
        };
        
        bootloaderFiles = mkOption {
          type = types.path;
          description = "Path to the directory containing shimboot bootloader files";
          default = ../bootloader;
          example = "./bootloader";
        };
        
        outputDir = mkOption {
          type = types.path;
          default = "./patched-initramfs";
          description = "Output directory for the patched initramfs";
        };
        
        autoPatch = mkOption {
          type = types.bool;
          default = false;
          description = "Whether to automatically patch initramfs during system activation";
        };
      };
      
      # Module implementation
      config = mkIf cfg.enable {
        # Import the initramfs patching module
        imports = [ (pkgs.callPackage ../initramfs-patching-poc/derivations/initramfs-patching-module.nix {
          config = {
            inherit (cfg) enable shimBin bootloaderFiles outputDir;
          };
        }) ];
        
        # Create a script that can be used to manually patch initramfs
        environment.systemPackages = [
          (pkgs.writeShellScriptBin "patch-chromeos-initramfs" ''
            set -euo pipefail
            
            echo "Patching ChromeOS initramfs..."
            echo "Shim binary: ${cfg.shimBin}"
            echo "Bootloader files: ${cfg.bootloaderFiles}"
            echo "Output directory: ${cfg.outputDir}"
            
            # Create output directory
            mkdir -p ${cfg.outputDir}
            
            # Copy the patched initramfs from the Nix store
            if [ -d "${config.system.activationScripts.initramfs-patching.text}" ]; then
              echo "Copying patched initramfs..."
              cp -r ${config.system.activationScripts.initramfs-patching.text}/* ${cfg.outputDir}/
              echo "âœ“ Initramfs patching completed successfully!"
              echo "âœ“ Patched initramfs available at: ${cfg.outputDir}"
            else
              echo "ERROR: Patched initramfs not found in Nix store"
              echo "Please run: nixos-rebuild switch"
              exit 1
            fi
          '')
        ];
        
        # Add information to system documentation
        documentation.info.initramfs-patching = {
          name = "Initramfs Patching";
          description = "ChromeOS initramfs patching with shimboot bootloader";
          maintainer = "shimboot developers";
          documentation = ''
            This module provides declarative initramfs patching for ChromeOS shim binaries.
            
            Usage:
            1. Enable the module in your configuration:
               initramfs-patching.enable = true;
            
            2. Configure paths if needed:
               initramfs-patching.shimBin = "/path/to/shim.bin";
               initramfs-patching.bootloaderFiles = "/path/to/bootloader";
            
            3. Build the system:
               nixos-rebuild switch
            
            4. The patched initramfs will be available at: ${cfg.outputDir}
            
            For manual patching, run: patch-chromeos-initramfs
          '';
        };
      };
    };
}